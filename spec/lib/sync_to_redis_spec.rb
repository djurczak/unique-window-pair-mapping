require 'mock_redis'
require 'command'

require_relative File.join("..", "..", "lib", "sync_to_redis.rb")

describe SyncToRedis do
  describe "#convert_to_frequency_files" do
    let(:path_to_bed) { "/clustertmp/brennecke/apps/splitting/ykex0cwl8w1m18x/dmel-all-chromosome-r5.51.noUex.win32.splitbg" }
    context "given a file in bed format" do
      it "generates a table generated by gnu uniq" do
        instance = SyncToRedis.new
        Command.should_receive(:run).with("cat /clustertmp/brennecke/apps/splitting/ykex0cwl8w1m18x/dmel-all-chromosome-r5.51.noUex.win32.splitbg | ruby -nae 'puts $F[3]' | uniq -c > /clustertmp/brennecke/apps/splitting/ykex0cwl8w1m18x/dmel-all-chromosome-r5.51.noUex.win32.uniqbg").once
        instance.convert_to_frequency_files(path_to_bed)
      end

      it "returns the path for gnu uniq table" do
        instance = SyncToRedis.new
        expect(instance.convert_to_frequency_files(path_to_bed)).to eq "/clustertmp/brennecke/apps/splitting/ykex0cwl8w1m18x/dmel-all-chromosome-r5.51.noUex.win32.uniqbg"
      end
    end
  end

  describe "#push_frequencies_to_redis" do
    it "increments the numbers of unique read names in a redis instance" do
      uniq_file = ["1 yhet_0_32","1 yhet_4_36","1 yhet_0_32","1 yhet_7_39","3 yhet_0_32","1 yhet_6_38","3 yhet_0_32","1 yhet_20_52","2 yhet_0_32","1 yhet_8_40"]

      instance = SyncToRedis.new
      redis_connection = MockRedis.new

      instance.push_frequencies_to_redis(redis_connection, uniq_file)

      expect(redis_connection.get("yhet_0")).to eq "10"
    end
  end

  describe "#remove_frequences_from_redis" do
    let(:uniq_file) { ["1 yhet_0_32","1 yhet_4_36","1 yhet_0_32","1 yhet_7_39","3 yhet_0_32","1 yhet_6_38","3 yhet_0_32","1 yhet_20_52","2 yhet_0_32","1 yhet_8_40"] }
    it "decrements the numbers of unique read names in a redis instance" do
      instance = SyncToRedis.new
      redis_connection = MockRedis.new

      redis_connection.incrby("yhet_0", 11)
      instance.remove_frequences_from_redis(redis_connection, uniq_file)

      expect(redis_connection.get("yhet_0")).to eq "1"
    end

    it "removes an entry from redis once the frequency is smaller than zero" do
      instance = SyncToRedis.new
      redis_connection = MockRedis.new

      redis_connection.incrby("yhet_0", 5)
      instance.remove_frequences_from_redis(redis_connection, uniq_file)

      expect(redis_connection.exists("yhet_0")).to eq false
    end
  end

  describe "#line_to_data" do
    context "when given forward data" do
      it "creates a title based on chrom + start" do
        instance = SyncToRedis.new
        line = "      38 chr2l_20747989_20748020"

        expect(
          instance.line_to_data(line, { :orientation => :forward }).title
        ).to eq "chr2l_20747989"
      end

      it "reports the frequency" do
        instance = SyncToRedis.new
        line = "      38 chr2l_20747989_20748020"

        expect(
          instance.line_to_data(line, { :orientation => :forward }).freq
        ).to eq 38
      end
    end

    context "when given reverse data" do
      it "creates a title based on chrom + end" do
        instance = SyncToRedis.new
        line = "      38 chr2l_20747989_20748020"

        expect(
          instance.line_to_data(line, { :orientation => :reverse }).title
        ).to eq "chr2l_20748020"
      end

      it "reports the frequency" do
        instance = SyncToRedis.new
        line = "      38 chr2l_20747989_20748020"

        expect(
          instance.line_to_data(line, { :orientation => :forward }).freq
        ).to eq 38
      end
    end
  end

  describe "#parse_location" do
    context "when given reverse data" do
      it "creates a title based on chrom + end" do
        instance = SyncToRedis.new
        expect(
          instance.parse_location(
            "chr2l_20747989_20748020", { :orientation => :forward }
          )).to eq "chr2l_20747989"
      end
    end

    context "when given reverse data" do
      it "creates a title based on chrom + end" do
        instance = SyncToRedis.new
        expect(
          instance.parse_location(
            "chr2l_20747989_20748020", { :orientation => :reverse }
          )).to eq "chr2l_20748020"
      end
    end
  end
end
